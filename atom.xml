<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nicetomeetu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nicetomeetu21.github.io/"/>
  <updated>2018-12-19T06:33:21.644Z</updated>
  <id>https://nicetomeetu21.github.io/</id>
  
  <author>
    <name>hk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Digital Image Processing (3rd Edition) [Gonzalez]》 第2章学习笔记</title>
    <link href="https://nicetomeetu21.github.io/2018/12/06/%E3%80%8ADigital-Image-Processing-3rd-Edition-Gonzalez-%E3%80%8B-%E7%AC%AC2%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nicetomeetu21.github.io/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/</id>
    <published>2018-12-06T07:34:45.000Z</published>
    <updated>2018-12-19T06:33:21.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-Digital-Image-Fundamentals"><a href="#2-Digital-Image-Fundamentals" class="headerlink" title="2 Digital Image Fundamentals"></a>2 Digital Image Fundamentals</h1><blockquote><p>Those who wish to succeed must ask the right preliminary questions —— Aristotle </p></blockquote><h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><p>本章的第一个目的是向你介绍数字图像处理中的一些基础概念，它们将在本书中沿用。</p><ul><li><em>section 2.1</em>：人类视觉系统的机理，包括人眼成像、光线适应性和辨别能力。</li><li><em>section 2.2</em>：光以及其他电磁波谱的组成部分，它们的成像特性。</li><li><em>section 2.3</em>：图像传感器和它们如何成像。</li><li><em>section 2.4</em>：均匀图像采样和灰度量化的一些概念。</li><li><em>section 2.5</em>：处理了各式各样的像素之间的基本关系。</li><li><em>section 2.6</em>：介绍本书中主要使用的数学工具。</li></ul><p>第二个目的是帮助你建立一种 &quot;感觉&quot;，其关于如何使用这些工具去完成各种各样的基础图像处理任务。工具的范围和用法亦将随后文而扩展。</p><a id="more"></a><h2 id="2-1-Elements-of-Visual-Perception"><a href="#2-1-Elements-of-Visual-Perception" class="headerlink" title="2.1 Elements of Visual Perception"></a>2.1 Elements of Visual Perception</h2><p>虽然数字图像处理是建立在数学和概率公式的基础上，但选择合适的技术仍需要人的直觉和分析，而这些选择通常基于主观的视觉判断上。所以本书选择从建立一个对人类视觉感知的基础的理解开始。</p><p>由于篇幅有限不可能讲太细。我们的兴趣主要集中在与人类生成图像并感知相关的机理和参数，以及通过一些因素来学习人类视觉的物理限制，它们也同样用于数字图像的处理。</p><h3 id="2-1-1-Structure-of-the-Human-Eye"><a href="#2-1-1-Structure-of-the-Human-Eye" class="headerlink" title="2.1.1 Structure of the Human Eye"></a>2.1.1 Structure of the Human Eye</h3><img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.1.png"><p>图2.1是一个简化版的人眼横截面图。眼球近似一个球，大约 20 mm 的平均直径。有三层薄膜包围眼球：<em>cornea</em>（眼角膜），<em>sclera</em> （巩膜）外壳，<em>choroid</em>（脉络膜），<em>retina</em>（视网膜）。</p><p><em>cornea</em> 是一种硬而透明的组织，覆盖着眼睛的前表面。与 <em>cornea</em> 相连的是 <em>sclera</em> ，一层不透明的膜覆眼球的剩余区域。</p><p><em>choroid</em> 在 <em>sclera</em> 的正下方，这层膜包含了血管网络，作为滋养眼球的主要来源。<em>choroid</em> 在最前端分为<em>ciliary body</em>（睫状体） 和 <em>iris</em>（虹膜），后者通过收缩和扩张来控制进入眼球光线的数量。</p><p><em>lens</em>（晶状体）由纤维细胞的同心层构成，通过依附于<em>ciliary body</em> 的 <em>ciliary fibers</em> 悬浮。 </p><p>眼睛最里面的膜是 <em>retina</em>，它布满了整个眼球后部。当人眼适当聚焦，来自外部物体的光线将在其上成像。图像由 <em>retina</em> 上离散的光线接收器提供。接收器主要分两种：<em>cones</em>（锥状体） 和 <em>rods</em>（杆状体）。</p><p><em>cones</em> 的数量在600-700万之间，主要位于视网膜的中间部分 <em>fovea</em>（中央凹），其对颜色高度敏感。人们主要通过它们来分辨图像细节，因为每一个 <em>cones</em> 都连着自己的神经末端。</p><p><em>rods</em> 的数量大约7500-15000万，分布在 <em>retina</em> 表面，它们与彩色视觉无关，而对低照明度敏感。它们用来给出视野内的一般的总体的图像。</p><img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.2.png"><p>图2.2显示了右眼横截面中视神经出现区域的 <em>rods</em> 和 <em>cons</em> 的密度。可以注意到，<em>cons</em> 的密度从 <em>fovea</em> 往外由大变小，而 <em>rods</em> 的密度先变大后变小，距视轴20°左右最大。当然除盲点外。</p><p><em>fovea</em> 本身是一个直径 1.5 mm 的圆形凹槽，为了便于讨论，我们将它视为 $1.5mm * 1.5mm$ 的方形传感器阵列。其上 <em>cons</em> 的密度大约 $150000 mm^2$，即眼球中最敏锐的区域有大约 33700 个。从自然分辨能力上讲，一个 电荷耦合器（<em>charge-coupled device</em>）成像芯片可以有如此多的传感器在$5mm*5mm$的阵列中。 简而言之，眼睛在分辨细节上的基础能力和现在的电子成像传感器相当。</p><h3 id="2-1-2-Image-Formation-in-the-Eye"><a href="#2-1-2-Image-Formation-in-the-Eye" class="headerlink" title="2.1.2 Image Formation in the Eye"></a>2.1.2 Image Formation in the Eye</h3><p>普通摄影相机中，镜头有固定的焦距聚焦不同的距离是通过变化镜头和成像平面的的距离实现的，成像平面即胶片所在的位置。人眼则相反，镜头和成像区域（<em>retina</em>）的距离是固定的，合适的聚焦距离由改变晶状体（<em>lens</em>）的形状得到。这个操作由睫状体（<em>ciliary body</em>）完成，根据目标距离的远近扁平或加厚晶状体。</p><h3 id="2-1-3-Brightness-Adaptation-and-Discrimination"><a href="#2-1-3-Brightness-Adaptation-and-Discrimination" class="headerlink" title="2.1.3 Brightness Adaptation and Discrimination"></a>2.1.3 Brightness Adaptation and Discrimination</h3><h4 id="Brightness-Adaptation"><a href="#Brightness-Adaptation" class="headerlink" title="Brightness Adaptation"></a>Brightness Adaptation</h4><p>由于数字图像被显示为一个离散的灰度集合。人眼对不同灰度等级的分辨能力在展示图像处理的成果上很重要。人眼视觉系统可接受的光强度的范围很大，从暗示阈值（<em>scotopic threshold</em>）到强光极限（<em>glare limit</em>）。实验数据指出，入射光强度和主观亮度（<em>subjective brightness</em>）是对数函数关系。</p><img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.4.png"><p>图2.4即 光强-主观亮度图。长实线代表了被视觉系统接受的光强度。亮视觉（<em>photopic</em>）范围大约$10^6$。由暗视觉（<em>scotopic</em>）转变为亮视觉的范围大约是 0.001mL 至 0.1mL（<em>millilambert</em>）。</p><p>对图中动态范围的解释中，最关键的一点在于视觉系统不能在一个范围中同时工作，即同时只能适应于某一点的光强。它通过改变整体的敏感性来实现这么大范围的适应性改变，即亮度适应现象（<em>brightness adaption</em>）。眼睛可同时辨别的亮度范围较整个适应范围来说很小。对任意给定的条件集，视觉系统的当前感光等级被称为亮度适应等级（<em>brightness adaption level</em>），例如图中点$B_a$。短斜线表示人眼适应于这个亮度等级下时，主观亮度的范围，低于$B_b$的光将成为不可辨别的黑色，斜线上端实际上没有限制，但是更高强度的光会将亮度适应等级提高。</p><h4 id="Brightness-Discrimination"><a href="#Brightness-Discrimination" class="headerlink" title="Brightness Discrimination"></a>Brightness Discrimination</h4><p>关于人眼在某一个特定适应等级下，对光强的变化的辨别能力，一个著名的实验：对象注视一个足够大的充满视野的均匀发光区，这个区域是典型的漫反射体，使用强度$I$的可变光源从后照射它。在其中心的小圆形范围内增加强度为$\Delta I$的闪光。</p><p>如果$\Delta I$不够亮，对象说&quot;no&quot;，最终加到够亮对象会一直说&quot;yes&quot;。分量$\Delta I_c/I$被称为（<em>Weber ratio</em>）,其中$\Delta I_c$是背景为$I$时可辨别照明度增加量的$50\%$。$\Delta I_c/I$越小代表可辨别度越好。</p><img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.6.png"><p>图 2.6 显示，低照明度情况下辨别能力弱，但其随着背景光照增强而迅速增强。两条曲线反映出在低照明度下视觉主要由 <em>rods</em> 提供，而高等级下由 <em>cones</em> 提供。</p><p>如果背景光强度固定，且用其他光源代替闪光，将其强度从不能被觉察逐渐变化到始终被察觉，典型的观察者可以观察到 24 次不同的强度变化。粗略地看，这个结果和一个人一张单色图像的任意一点能观察到的不同灰度数量相关。但并不是说一张图象可以被表示为这么点灰度，因为当人眼扫图片时，平均背景发生了变化，故允许在新的适应等级上察觉到不同的强度增量集。最终结果是在整体灰度辩别上眼睛能适应更宽的范围。</p><h4 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h4><p>这两个现象证明被感知的亮度不是简单的关于强度的函数。第一个现象基于一个事实，视觉系统倾向于在不同光强度的边界产生&quot;下冲&quot;或&quot;上冲&quot;现象，如图 2.7。这样带圆齿的带被称为 <em>Mach bands</em></p><img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.7.png"><p>第二个现象被称为 <em>simultaneous contrast</em> ，基于一个事实，一个区域可观察到的亮度不简单取决于其灰度，如图 2.8。</p><img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.8.png"><p>另一些人类感知现象是视觉错觉，眼睛填充了不存在的信息或错误地赶制了物体的几何特性，如图 2.9。</p><img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.9.png"><h2 id="2-2-Light-and-the-Electromagnetic-Spectrum"><a href="#2-2-Light-and-the-Electromagnetic-Spectrum" class="headerlink" title="2.2 Light and the Electromagnetic Spectrum"></a>2.2 Light and the Electromagnetic Spectrum</h2><p>这部分内容与中学相仿。</p><img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.10.png"><p>没有颜色的光被称为 <em>monochromatic light</em>（单色光）或 <em>achromatic light</em>（无色光）。单色光唯一的属性是<em>intensity</em>（强度）或大小。由于单色光的强度反映在感知中是从黑色到灰色，最后变成白色的变化，故单色光的强度通常由 <em>gray level</em>（灰度）来表示。我们将在后续的讨论中交替使用术语 <em>intensity</em> 和 <em>gray level</em>。单色光由黑到白时强度测量值的范围被称为 <em>gray scale</em>，而单色图像通常被成为 <em>gray-scale images</em>。</p><p><em>chromatic light</em>（有色光）跨越电磁波谱的大约 $0.43$ 到 $0.79 \mu m$。除了频率，还有三个基本量用来描述有色光的质量：<em>radiance</em>（发光强度），<em>luminance</em>（光通量），<em>brightness</em>（亮度）。<em>radiance</em> 是光源流出的总能量，通常用 <em>watts</em>（W,瓦特）表示。<em>luminance</em> 由 <em>lumens</em>（lm,流明数）度量，表示对象可感知到的光源发出的总能量。<em>brightness</em> 是一种光感知的主观的描述符，不能测量，它体现了光强度的无色概念，是描述色彩感知的重要因素之一。</p><p>理论上，如果一个传感器能检测到某一段电测波谱发出的能量，我们就可以在这个波段上对感兴趣的事件成像。比较重要的一点要指出，若要使一段电磁波 &quot;看&quot; 到物体，其波长必须小于等于目标的尺寸。</p><h2 id="2-3-Image-Sensing-and-Acquisition"><a href="#2-3-Image-Sensing-and-Acquisition" class="headerlink" title="2.3 Image Sensing and Acquisition"></a>2.3 Image Sensing and Acquisition</h2><p>我们感兴趣的多数图像是由一个 &quot;光源&quot; 和 被成像的 &quot;场景&quot;（其具有吸收或反射光源能量的元素）组成。加引号是因为其不一定是每天常见的光源和场景，就比如X光照片。</p> <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.12.png"><p>图像传感器原理很简单：入射光通过特定感知材料与输入的电能相结合，转换成电压。输出的电压波形即传感器的响应，而通过把每个传感器的响应数字化，可得到一个数字量，图像数字化将留到 2.4 节讨论。</p><h3 id="2-3-1-Image-Acquisition-Using-a-Single-Sensor"><a href="#2-3-1-Image-Acquisition-Using-a-Single-Sensor" class="headerlink" title="2.3.1 Image Acquisition Using a Single Sensor"></a>2.3.1 Image Acquisition Using a Single Sensor</h3><p>图 2.12(a) 即单个传感器的组件。最常见的这种传感器是光电二极管，其由硅材料制成，输出的电压波形与光强成正比。在传感器的前面使用一个过滤器和提高其光线选择性。</p><p>若用这种传感器绘制 2D 图片，就需要给其分别提供在绘制区域上 x 和 y 方向的位移。图 2.13 显示了一个用于高精度扫描的配置。由于机械运动可控精度高，这种廉价而慢速的方法可以得到高精度的图像。另一种配置是在一个平面上，传感器在两个方向上线形移动。这些机械数字化仪有时被称为 <em>microdensitometers</em>（微密度计）。</p> <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.13.png"><h3 id="2-3-2-Image-Acquisition-Using-Sensor-Strips"><a href="#2-3-2-Image-Acquisition-Using-Sensor-Strips" class="headerlink" title="2.3.2 Image Acquisition Using Sensor Strips"></a>2.3.2 Image Acquisition Using Sensor Strips</h3><p>将传感器排成一维直线后组成传感器带，这类几何结构比单个传感器使用更加频繁，如图 2.12(b)。该传感器带在一个方向上提供成像单元，在另一个方向上垂直于传感器带移动而成像，如图 2.14(a)。</p><p>以圆环形方式安装的传感器带用于医学和工业成像，以得到 3D 物体的横截面图，如图 2.14(b)。需要注意的是，这类传感器的输出必须通过重构算法以获得有意义的横截面图像，换句话说图像不能直接由传感器获取。</p> <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.14.png"><h3 id="2-3-3-Image-Acquisition-Using-Sensor-Arrays"><a href="#2-3-3-Image-Acquisition-Using-Sensor-Arrays" class="headerlink" title="2.3.3 Image Acquisition Using Sensor Arrays"></a>2.3.3 Image Acquisition Using Sensor Arrays</h3><p>图 2.12(c) 显示了单独的传感器构成了 2D 的传感器阵列。大量电磁波和超声波装置使用这种构造。这也同样是数字摄像机的主要构造方式。这类传感器的主要用法如图 2.15。</p> <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.15.png"><h3 id="2-3-4-A-Simple-Image-Formation-Model"><a href="#2-3-4-A-Simple-Image-Formation-Model" class="headerlink" title="2.3.4 A Simple Image Formation Model"></a>2.3.4 A Simple Image Formation Model</h3><p>在章节 1.1 中，我们定义了一张图片为形如 $f(x,y)$ 的二元方程。在 $(x,y)$ 处的 $f$ 的值是一个正标量，其物理意义由图片源决定。当一张图片由物理过程产生时，其亮度正比于光源射出的能量，因此，$f(x,y)$ 一定非零值，并且有限：$0&lt;f(x,y)&lt;\infty$。</p><p>方程 $f(x,y)$ 可以由两部分组成：</p><ul><li><em>illumination</em>（反射分量）：入射到场景内的光源照射量，记为 $i(x,y)$，其性质取决于光源。</li><li><em>reflectance</em>（入射分量）：被物体反射的光照量，记为$r(x,y)$，其性质取决于成像物体。</li></ul><p>$$f(x,y)=i(x,y)r(x,y), 0&lt;i(x,y)&lt;\infty , 0&lt;r(x,y)&lt;1$$</p><p>这些表达式也同样适用于入射光通过介质成像（胸透X射线），此时用 <em>transmissivity</em> 替代 <em>reflectance</em>。</p><p>设一张单色图的某一点 $(x_0,y_0)$ 的灰度为 $\ell = f(x_0,y_0)$，且$L_{min} \le \ell \le L_{max}$。理论上唯一的要求即 $L_{min}$ 是正数，$L_{max}$ 有限。事实上，$L_{min}=i_{min}r_{min}, L_{max}=i_{max}r_{max}$。区间 $[L_{min},L_{max}]$ 即 <em>gray scale</em>。常见情况是将区间在数字上平移至$[0,L-1]$，$\ell = 0$ 代表黑色，$\ell = L-1$ 代表白色。</p><h2 id="2-4-Image-Sampling-and-Quantization"><a href="#2-4-Image-Sampling-and-Quantization" class="headerlink" title="2.4 Image Sampling and Quantization"></a>2.4 Image Sampling and Quantization</h2><p>在上一节的讨论中，我们见到了很多种获得图片的方式，不过我们目标都相同：在感知的数据上产生图片。大多数传感器产生的输出都是连续的电压波形，其振幅与空间特性与感知到的物理特点相关。为了产生数字图像，我们需要将这些连续的感知数据转换至数字形式，这包含两个过程：<em>sampling</em>（采样），<em>quantization</em>（量化）。</p><h3 id="2-4-1-Basic-Concepts-in-Sampling-and-Quantization"><a href="#2-4-1-Basic-Concepts-in-Sampling-and-Quantization" class="headerlink" title="2.4.1 Basic Concepts in Sampling and Quantization"></a>2.4.1 Basic Concepts in Sampling and Quantization</h3><p>采样与量化的基本思想如图 2.16。一张图像可能在 x 轴和 y 轴以及振幅上都是连续的。为了将其转化成数字形式，我们需要在其坐标和振幅上分别进行采样，对坐标进行数字化被称为 <em>sampling</em>，对振幅数字化被称为 <em>quantization</em>。</p> <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.16.png"><p>图2.16(c)中白色方块即为对坐标等间隔采样结果，2.16(d)即对振幅量化后的最终数字样本。图中亦可知，量化能达到得精度除了与使用的离散等级得数量相关，也与样本信号得噪声高度相关。</p><p>上述采样过程假设了我们有一张在坐标和振幅上都连续的图片，实际上，采样方式由产生图片的传感器的组成决定。当使用单个传感器产生图片时，采样可采用上述过程，具体方式即通过机械位移来使传感器到指定位置采集数据。由于机械运动的高精度，使用这种方式采样可以到达的精度几乎没有限制，但实际上还有其他的干扰因素，比如系统光学原件的数量。</p><p>当我们使用 <em>sensing strip</em> 来获得图片，传感器的数目将成为采样精度的限制，虽然我们可以通过机械控制来增加一个方向的精度，但只增加某个方向的精度意义不大。当使用 <em>sensing array</em> 来获得图片时，传感器的个数将成为两个方向的精度限制。</p><h3 id="2-4-2-Representing-Digital-Images"><a href="#2-4-2-Representing-Digital-Images" class="headerlink" title="2.4.2 Representing Digital Images"></a>2.4.2 Representing Digital Images</h3><p>假设我们将一张连续图片采样为二维数组 $f(x,y)$，包含 $M$ 行 $N$ 列，为了简便起见，我们使用这些值作为离散坐标：$x=0,1,2,...,M-1$和$y=0,1,2,...,N-1$，即 0-based。这里的坐标并不代表被采样的图片上的物理坐标系，由一张图像的坐标张成的实平面被称为 <em>spatial domain</em>，而 x,y 被称为 <em>spatial variables</em> 或 <em>spatial coordinates</em>。</p> <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.18.png"><p>图 2.18 显示了 3 种基本的显示 f(x,y) 的方法。由于复杂图像包含细节过多，很难用图 2.18(a) 来分析，但处理元素为 (x,y,z)三元组时，这种表示还是很有用。通常图 2.18(b) 和图 2.18(c) 更有用。图 2.18(b) 是一个比较一般的表示方法，而图 2.18(c) 是一个矩阵形式，但由于图片大小的关系，通常很难完全打印。</p><p>在公式形式上，我们用 $M*N的数值阵列表示，或是以传统矩阵 A$ 表示。矩阵中的每一个元素被称为 <em>image element</em>, <em>picture element</em>, <em>pixel</em> 或 <em>pel</em>。<br>$$<br>f(x,y)=<br> \begin{pmatrix}<br>   f(0,0) &amp; f(0,1) &amp; \cdots &amp; f(0,N-1) \\<br>   f(1,0) &amp; f(1,1) &amp; \cdots &amp; f(1,N-1) \\<br>   \vdots &amp; \vdots &amp; &amp; \vdots \\<br>   f(M-1,0) &amp; f(M-1, 1) &amp; \cdots &amp; f(M-1, N-1)<br>  \end{pmatrix}<br>  = A = \begin{pmatrix}<br>   a_{0,0} &amp; a_{0,1} &amp; \cdots &amp; a_{0,N-1} \\<br>   a_{1,0} &amp; a_{1,1} &amp; \cdots &amp; a_{1,N-1} \\<br>   \vdots &amp; \vdots &amp; &amp; \vdots \\<br>   a_{M-1,0} &amp; a_{M-1, 1} &amp; \cdots &amp; a_{M-1, N-1}<br>  \end{pmatrix}<br>$$</p><p>简要回顾图 2.18，注意数字图像的原点在左上方，x 轴正方向向下，y 轴正方向下右。这种方便的表示法基于一个事实：很多图片显示装置（TV显示器）扫一张图片时是从左上角开始，从左向右扫的。更重要的事实是按照惯例，矩阵的第一个元素在左上角。</p><p>数字化过程需要对 M,N 和 L（离散灰度等级）的取值做出决定。除了必须是正整数，对 M,N 没有更多的限制。然而， 由于对存储容量和量化硬件的考虑，灰度等级通常是 2 的幂：L = 2^k。我们假设离散灰度是等间隔的，它们是处于[0,L-1]中的整数。有时候，<em>gray scale</em> 所跨越的值域被非正式德成为 <em>dynamic range</em>。这一术语在不同领域有不同的用法。在这里，我们定义一个图像系统的 <em>dynamic range</em> 为最大可测量灰度和最小可测量灰度的比值。一般来说其上限取决于<em>saturation</em>（饱和度），下限取决于<em>noise</em>（噪声），如图 2.19。</p> <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.19.png"><p>基本上，动态范围确立了系统能表示的最高和最低灰度，这也同样是图片能具有的。与之紧密相关的一个概念是 <em>image contrast</em>（图像对比度），我们定义它为一张图片最高和最低灰度之差。当一张图片中大量像素具有高动态范围时，我们可以预料图片具有高对比度。我们等第3章再讨论这些细节。</p><p>存储一张数字图像需要字节为：$b=M*N*k$。当一张图片有$2^k$个灰度等级时，常见的称法是<em>k-bit image</em>。</p><h3 id="2-4-3-Spatial-and-Intensity-Resolution"><a href="#2-4-3-Spatial-and-Intensity-Resolution" class="headerlink" title="2.4.3 Spatial and Intensity Resolution"></a>2.4.3 Spatial and Intensity Resolution</h3><p>直觉上，<em>spatial resolution</em> 是一张图片中最小可辩别细节的一种度量。在量化上，<em>spatial resolution</em> 可以被表示成好几种方法，其中 <em>line pairs per unit distance</em> 和 <em>dots(pixels) per unit distance</em> 最常用。假设我们用黑白相间的直线带建立一个图，每一条宽 $W units$ ，因此一个 <em>line pair</em> 的宽度为 $2W$， <em>spatial resolution</em> 为 $1/2W$<em>line pairs per unit distance</em>。一个广泛使用的图像分辨率的定义是可分辨的 <em>line pairs per unit distance</em> 的最大数量。在美国，这个测量法通常被表示为 <em>dots per inc</em> (dpi)。空间分辨率的度量必须相对于空间单位来规定才有意义。</p><p><em>intensity resolution</em> 类似定义为灰度等级上的最小可分辨区别。其通常由硬件决定，一般是 2 的幂。不同于 <em>spatial resolution</em> 必须基于单位距离基础才有意义，常见的做法是将量化灰度需要的字节数视为 <em>intensity resolution</em>，因为可分辨的区别不止受 <em>noise</em> 和 <em>saturation</em> 值影响，还与人类的感知能力相关。</p><p><strong>Typical effects of varying the number of intensity levels in a digital image. </strong></p><p><em>false contouring</em> 由在数字图像的平滑地区中使用的灰度等级不足造成。</p> <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.21.png"><p>一个关于同时改变 <em>N</em> 和 <em>k</em> 对图像造成影响的早期研究：图像集合由图 2.2 的三种图像变化 <em>N</em> 和 <em>k</em> 得到，观察者通过主观质量对它们排序</p>  <img src="/2018/12/06/《Digital-Image-Processing-3rd-Edition-Gonzalez-》-第2章学习笔记/FIGURE-2.22.png"><p>结果被总结为在 <em>NK</em>平面上的 <em>isopreference curves</em>（等偏爱曲线）。坐落在同一条等偏爱曲线的点代表相同主观质量的图片。随着图片中的细节增多，等偏爱曲线趋近于更加垂直。这个结果表示对于有大量细节的图片只需要较少灰度等级。这个结果最有可能的原因是 <em>k</em> 的减小趋向于对比度的明显增加，一个人们通常感受到图像质量改善了的视觉效果。</p><h3 id="2-4-4-Image-Interpolation"><a href="#2-4-4-Image-Interpolation" class="headerlink" title="2.4.4 Image Interpolation"></a>2.4.4 Image Interpolation</h3><p>内插是使用在诸如放大、收缩、旋转和几何校正中的基础的工具。我们在这一节中的主要目标是介绍内插并将它应用调整图片大小中，这是基本的图片 <em>resampling</em> 方法。</p><p>根本上，<em>interpolation</em> 是使用已知数据去估算未知位置的数据的一个过程。假设一张 $500\times 500 pixels$ 的图像扩大 1.5 倍为 $750\times 750 pixels$。一个简单的放大方法是创建一个 $750\times 750$格的图像，再将其缩小到恰好覆盖原图像。显然 $750\times 750$ 的格子小于原图像的像素格。为了对覆盖的每个点赋以灰度等级，我们将原图上距离其最近的点的灰度赋给它，最后放大至原来大小。</p><p>上述方法被称为 <em>nearest neighbor interpolation</em>，因为它将新图上每个点的灰度安排为原图上最近的点。这个方法简单但可能产生不被期望的缺陷，比如直边缘的严重扭曲，因此它很少在实际中使用。一个更适合的方法是 <em>bilinear interpolation</em> ，其中我们用最近的四个邻近点去估算某个位置的灰度值。令 $(x,y)$ 代表新图上的坐标系，$v(x,y)$ 代表其灰度值。则 <em>bilinear interpolation</em> 可被写为：$v(x,y)=ax+by+cxy+d$。四个参数即点 $(x,y)$ 的四个最邻近点。伴随计算负担的适度增长，<em>bilinear interpolation</em> 给出了比 <em>nearest neighbor interpolation</em> 好得多的结果。</p><p>下一个复杂度的算法是 <em>bicubic interpolation</em>，它使用了一个点的十六最临近点：$v(x,y)=\sum_{i=0}^{3}\sum_{j=0}^{3}a_{ij}x^iy^j$。</p><h2 id="2-5-Some-Basic-Relationships-between-Pixels"><a href="#2-5-Some-Basic-Relationships-between-Pixels" class="headerlink" title="2.5 Some Basic Relationships between Pixels"></a>2.5 Some Basic Relationships between Pixels</h2><p>在这一节里，我们考虑几个重要的数字图像的像素点间的关系。前面提到图像被表示为 $f(x,y)$，在这一节中当我们指一个特定的像素的时候，我们用小写字母表示，例如 <em>p</em>,<em>q</em>。</p><h3 id="2-5-1-Neighbors-of-a-Pixel"><a href="#2-5-1-Neighbors-of-a-Pixel" class="headerlink" title="2.5.1 Neighbors of a Pixel"></a>2.5.1 Neighbors of a Pixel</h3><p>一个像素点 <em>p</em> 有四个水平和竖直的邻居：$(x+1,y),(x-1,y),(x,y+1),(x,y-1)$。这些点集被称为 <em>p</em> 的 <em>4-neighbors</em>，被称为 $N_4(p)$。四个对角邻居 $(x+1,y+1),(x+1,y-1),(x-1,y+1),(x-1,y-1)$被称为 $N_D(p)$。这些点被一起称为 <em>p</em> 的 <em>8-neighbors</em>，$N_8(p)$。当然有一些$N_4(p)$和$N_8(p)$的点可能落在边界外。</p><h3 id="2-5-2-Adjacency-Connectivity-Regions-and-Boundaries"><a href="#2-5-2-Adjacency-Connectivity-Regions-and-Boundaries" class="headerlink" title="2.5.2 Adjacency, Connectivity, Regions, and Boundaries"></a>2.5.2 Adjacency, Connectivity, Regions, and Boundaries</h3><p>令 $V$ 为定义邻接性的灰度值集合。在二值图中当我们指值为 1 的像素点间的邻接性时  $V={1}$。在灰度图像中类似，但 $V$ 中包含更多值。我们考虑三种类型的邻接。</p><ul><li><em>4-adjacency</em>。当 $q \in N_4(p)$，具有 $V$ 中数值的两像素 <em>p,q</em> 是 4 邻接。</li><li><em>8-adjacency</em>。当 $q \in N_8(p)$，具有 $V$ 中数值的两像素 <em>p,q</em> 是 8 邻接。</li><li><em>m-adjacency</em>。当 $q \in N_4(p)$ 或 $q \in N_D(p)$ 且 $N_4(p)\cap N_4(q)$中的像素点的值都不属于$V$，具有 $V$ 中数值的两像素 <em>p,q</em> 是 m 邻接。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2-Digital-Image-Fundamentals&quot;&gt;&lt;a href=&quot;#2-Digital-Image-Fundamentals&quot; class=&quot;headerlink&quot; title=&quot;2 Digital Image Fundamentals&quot;&gt;&lt;/a&gt;2 Digital Image Fundamentals&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Those who wish to succeed must ask the right preliminary questions —— Aristotle &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h2&gt;&lt;p&gt;本章的第一个目的是向你介绍数字图像处理中的一些基础概念，它们将在本书中沿用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;section 2.1&lt;/em&gt;：人类视觉系统的机理，包括人眼成像、光线适应性和辨别能力。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;section 2.2&lt;/em&gt;：光以及其他电磁波谱的组成部分，它们的成像特性。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;section 2.3&lt;/em&gt;：图像传感器和它们如何成像。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;section 2.4&lt;/em&gt;：均匀图像采样和灰度量化的一些概念。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;section 2.5&lt;/em&gt;：处理了各式各样的像素之间的基本关系。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;section 2.6&lt;/em&gt;：介绍本书中主要使用的数学工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二个目的是帮助你建立一种 &amp;quot;感觉&amp;quot;，其关于如何使用这些工具去完成各种各样的基础图像处理任务。工具的范围和用法亦将随后文而扩展。&lt;/p&gt;
    
    </summary>
    
      <category term="Image Processing" scheme="https://nicetomeetu21.github.io/categories/Image-Processing/"/>
    
    
      <category term="学习笔记" scheme="https://nicetomeetu21.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Digital Image Processing (3rd Edition) [Gonzalez]》" scheme="https://nicetomeetu21.github.io/tags/%E3%80%8ADigital-Image-Processing-3rd-Edition-Gonzalez-%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Dwango Programming Contest V (A,B,C)</title>
    <link href="https://nicetomeetu21.github.io/2018/11/30/Dwango-Programming-Contest-V/"/>
    <id>https://nicetomeetu21.github.io/2018/11/30/Dwango-Programming-Contest-V/</id>
    <published>2018-11-30T06:57:14.000Z</published>
    <updated>2018-12-06T14:35:09.376Z</updated>
    
    <content type="html"><![CDATA[<p>800分的题目都做不出..</p><p>官方题解略长..告辞..</p><p><a href="https://beta.atcoder.jp/contests/dwacon5th-prelims" target="_blank" rel="noopener">地址</a></p><a id="more"></a><h2 id="A-Thumbnail"><a href="#A-Thumbnail" class="headerlink" title="A - Thumbnail"></a>A - Thumbnail</h2><p>水签到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">double</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), s += a[i];</span><br><span class="line">    s /= n;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[ans]-s) &gt; <span class="built_in">fabs</span>(a[i]-s)) ans = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Sum-AND-Subarrays"><a href="#B-Sum-AND-Subarrays" class="headerlink" title="B - Sum AND Subarrays"></a>B - Sum AND Subarrays</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>找 k 个数字使其 <em>and</em> 之和最大</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>按位贪心，如果这位上 1 的个数大于 k，就把这位上是 0 的数字全部删掉，再处理下一位，小于 k 就跳过。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pw(i) (1ull&lt;&lt;(i))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> p[N], n, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;ull&gt; a, b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ull tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">            tmp += p[j];</span><br><span class="line">            a.push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ull ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">62</span>;</span><br><span class="line">    <span class="keyword">while</span> (t &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) <span class="keyword">if</span> (x&amp;pw(t)) num++;</span><br><span class="line">        <span class="keyword">if</span> (num &gt;= k) &#123;</span><br><span class="line">            ans ^= pw(t);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) <span class="keyword">if</span> (x&amp;pw(t)) b.push_back(x);</span><br><span class="line">            a = b;</span><br><span class="line">        &#125;</span><br><span class="line">        t--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-k-DMC"><a href="#C-k-DMC" class="headerlink" title="C - k-DMC"></a>C - k-DMC</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定长为 N 的字符串 S，Q 个询问，每个询问给一个 k，要你找三元组(a,b,c)的个数，要求</p><ul><li>S[a]=&#39;D&#39;, S[b]=&#39;M&#39;, S[c] = &#39;C&#39;</li><li>$c-a &lt; k$</li></ul><p>数据范围 $N \le 1e6, Q \le 75$</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>看复杂度就知道$O(NQ)$挺合理。</p><p>枚举 &#39;C&#39;，这样每个询问变为$O(1)$求区间内 (&#39;D&#39;,&#39;M&#39;) 的对数。</p><p>预处理每个数字前面 &#39;D&#39; 的个数和每个数字前面 &#39;M&#39; 的个数，以及每个数字前 (&#39;D&#39;,&#39;M&#39;) 对数，这样就可以做到$O(1)$的区间查询了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line">ll D[N], M[N], DM[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        D[i] = D[i<span class="number">-1</span>], M[i] = M[i<span class="number">-1</span>];</span><br><span class="line">        DM[i] = DM[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'D'</span>) D[i]++;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'M'</span>) M[i]++, DM[i] += D[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'C'</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = max(<span class="number">0</span>, i-k);</span><br><span class="line">                ans += DM[i]-DM[j]-D[j]*(M[i]-M[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;800分的题目都做不出..&lt;/p&gt;
&lt;p&gt;官方题解略长..告辞..&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://beta.atcoder.jp/contests/dwacon5th-prelims&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Contest" scheme="https://nicetomeetu21.github.io/categories/Programming-Contest/"/>
    
    
      <category term="AtCoder" scheme="https://nicetomeetu21.github.io/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 55(A-E,G)</title>
    <link href="https://nicetomeetu21.github.io/2018/11/29/Educational-Codeforces-Round-55/"/>
    <id>https://nicetomeetu21.github.io/2018/11/29/Educational-Codeforces-Round-55/</id>
    <published>2018-11-29T08:18:16.000Z</published>
    <updated>2018-12-06T14:34:50.599Z</updated>
    
    <content type="html"><![CDATA[<p>一万个人会 <em>G</em>.. 已经记不得多久没写网络流了..</p><p><em>E</em> 题 k=1的话还做做，大于1还没想好.. 这也太复杂了.. </p><p>这里的老哥敲题可真快..</p><p><a href="https://codeforces.com/contest/1082" target="_blank" rel="noopener">地址</a></p><a id="more"></a><h2 id="A-Vasya-and-Book"><a href="#A-Vasya-and-Book" class="headerlink" title="A. Vasya and Book"></a>A. Vasya and Book</h2><p>水分类讨论。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, x, y, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;x, &amp;y, &amp;d);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span> (x%d == y%d) ans = min(ans, <span class="built_in">abs</span>(x-y)/d);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>%d == y%d) ans = min(ans, (y<span class="number">-1</span>)/d+(x<span class="number">-1</span>)/d+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (n%d == y%d) ans = min(ans, (n-y)/d+(n-x)/d+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">1e9</span>+<span class="number">5</span>) ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Vova-and-Trophies"><a href="#B-Vova-and-Trophies" class="headerlink" title="B. Vova and Trophies"></a>B. Vova and Trophies</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个只包含 &#39;G&#39; &#39;S&#39; 的字符串，问你交换一次任意两个字符后，连续的 &#39;G&#39; 最多有多长</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>枚举 &#39;S&#39;，判断这个&#39;S&#39; 换成 &#39;G&#39; 后加上其两边的总长，稍作讨论。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> l[N], r[N];</span><br><span class="line"><span class="keyword">int</span> n, num;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'G'</span>) l[i] = l[i<span class="number">-1</span>]+<span class="number">1</span>, num++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'G'</span>) r[i] = r[i+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans = max(ans, l[i]);</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'S'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == l[i<span class="number">-1</span>]+r[i+<span class="number">1</span>]) ans = max(ans, l[i<span class="number">-1</span>]+r[i+<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span> ans = max(ans, l[i<span class="number">-1</span>]+r[i+<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Multi-Subject-Competition"><a href="#C-Multi-Subject-Competition" class="headerlink" title="C. Multi-Subject Competition"></a>C. Multi-Subject Competition</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给你每个学生的专攻方向和其技能等级，要求你所选的每个方向的人数都相同。</p><p>问你能得到的最大技能等级之和。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>按专攻方向分类，再分别从大到小排序。</p><p>然后分别算出这个专业选 i 人对答案的共献，即max(0, sum of prefix[i])。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line">ll res[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        v[a].push_back(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) sort(v[i].begin(), v[i].end(), cmp1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        ll tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].size(); j++) &#123;</span><br><span class="line">            tmp += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            res[j+<span class="number">1</span>] += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = max(ans, res[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Maximum-Diameter-Graph"><a href="#D-Maximum-Diameter-Graph" class="headerlink" title="D. Maximum Diameter Graph"></a>D. Maximum Diameter Graph</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给你每个点的度数限制，问你不超过度数限制的情况下如何连边，使得连通图的直径最长。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>点分为一度和大于一度。可以先判断下连不连通。</p><p>大于1度的点一定连成一条直线，然后头尾连俩一度的点，中间随便插即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> n, d[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d[i]);</span><br><span class="line">        <span class="keyword">if</span> (d[i] == <span class="number">1</span>) a.push_back(i);</span><br><span class="line">        <span class="keyword">else</span> b.push_back(i), s += d[i]<span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">int</span>)a.size()<span class="number">-2</span> &gt; s) <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = b.size() + min((<span class="keyword">int</span>)a.size(),<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"YES %d\n"</span>, ans<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (b.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"1 2"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size()<span class="number">-1</span>; i++) res.push_back(pii(b[i], b[i+<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">if</span> (a.size() &gt;= <span class="number">1</span>) res.push_back(pii(b[<span class="number">0</span>], a[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">if</span> (a.size() &gt;= <span class="number">2</span>) res.push_back(pii(b[b.size()<span class="number">-1</span>], a[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; a.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (d[b[j]] &lt;= <span class="number">2</span>) j++;</span><br><span class="line">            res.push_back(pii(a[i], b[j]));</span><br><span class="line">            d[b[j]]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : res) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, p.first, p.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Increasing-Frequency"><a href="#E-Increasing-Frequency" class="headerlink" title="E. Increasing Frequency"></a>E. Increasing Frequency</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定一个数字序列。你有一次区间加法的机会，问操作后连续的数字 <em>c</em> 最多是多少个。</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>不同数字分别考虑。然后 <em>DP</em>，对每个位置而言分别有三个状态：操作区间前，操作区间中，操作区间后。从前一个位置转移即可。</p><p>(代码写得略烂..写得我自己都有点浑..)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, c, a[N];</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        num[i] = num[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == c) num[i]++;</span><br><span class="line">        v[a[i]].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = num[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == c) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!v[i].size()) <span class="keyword">continue</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = num[v[i][<span class="number">0</span>]];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = num[v[i][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; v[i].size(); j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = num[v[i][j]]-num[v[i][j<span class="number">-1</span>]];</span><br><span class="line">            dp[j][<span class="number">0</span>] = dp[j<span class="number">-1</span>][<span class="number">0</span>] + tmp;</span><br><span class="line">            dp[j][<span class="number">1</span>] = max(dp[j<span class="number">-1</span>][<span class="number">0</span>] + tmp+<span class="number">1</span>, dp[j<span class="number">-1</span>][<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">            dp[j][<span class="number">2</span>] = max(dp[j<span class="number">-1</span>][<span class="number">2</span>], dp[j<span class="number">-1</span>][<span class="number">1</span>]) + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = v[i].size();</span><br><span class="line">        ans = max(ans, dp[m<span class="number">-1</span>][<span class="number">2</span>]+num[n]-num[v[i][m<span class="number">-1</span>]]);</span><br><span class="line">        ans = max(ans, dp[m<span class="number">-1</span>][<span class="number">0</span>]+num[n]-num[v[i][m<span class="number">-1</span>]]);</span><br><span class="line">        ans = max(ans, dp[m<span class="number">-1</span>][<span class="number">1</span>]+num[n]-num[v[i][m<span class="number">-1</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Petya-and-Graph"><a href="#G-Petya-and-Graph" class="headerlink" title="G. Petya and Graph"></a>G. Petya and Graph</h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>选了边就要选两头的点。问你最终选出的子图边权减点权最大是多少。</p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>最大权闭合子图..</p><p>由于是二分图，复杂度不超过 O(n*m)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    Edge(<span class="keyword">int</span> a, <span class="keyword">int</span> b, ll c, ll d) :from(a), to(b), cap(c), flow(d) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> from, to;</span><br><span class="line">    ll cap, flow;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dinic</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">int</span> d[N], cur[N], s, t;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) G[i].clear();</span><br><span class="line">        edges.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, ll cap)</span> </span>&#123;</span><br><span class="line">        edges.push_back(Edge(from, to, cap, <span class="number">0</span>));</span><br><span class="line">        edges.push_back(Edge(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> x = edges.size();</span><br><span class="line">        G[from].push_back(x - <span class="number">2</span>);</span><br><span class="line">        G[to].push_back(x - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(s);</span><br><span class="line">        d[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;G[x].size(); i++) &#123;</span><br><span class="line">                Edge&amp; e = edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span> (!vis[e.to] &amp;&amp; e.cap &gt; e.flow) &#123;</span><br><span class="line">                    vis[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    d[e.to] = d[x] + <span class="number">1</span>;</span><br><span class="line">                    Q.push(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, ll a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == t || a == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        ll flow = <span class="number">0</span>, f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = cur[x]; i &lt; G[x].size(); i++) &#123;</span><br><span class="line">            Edge&amp; e = edges[G[x][i]];</span><br><span class="line">            <span class="keyword">if</span> (d[x] + <span class="number">1</span> == d[e.to]</span><br><span class="line">                &amp;&amp; (f = DFS(e.to, min(a, e.cap - e.flow))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                e.flow += f;</span><br><span class="line">                edges[G[x][i] ^ <span class="number">1</span>].flow -= f;</span><br><span class="line">                flow += f;</span><br><span class="line">                a -= f;</span><br><span class="line">                <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">MaxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;s = s; <span class="keyword">this</span>-&gt;t = t;</span><br><span class="line">        ll flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span>(cur));</span><br><span class="line">            flow += DFS(s, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;dinic;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> st = N<span class="number">-1</span>, ed = N<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> w; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</span><br><span class="line">        dinic.AddEdge(i, ed, w);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        dinic.AddEdge(st, n+i, w);</span><br><span class="line">        dinic.AddEdge(n+i, u, INF);</span><br><span class="line">        dinic.AddEdge(n+i, v, INF);</span><br><span class="line">        ans += w;</span><br><span class="line">    &#125;</span><br><span class="line">    ans -= dinic.MaxFlow(st, ed);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一万个人会 &lt;em&gt;G&lt;/em&gt;.. 已经记不得多久没写网络流了..&lt;/p&gt;
&lt;p&gt;&lt;em&gt;E&lt;/em&gt; 题 k=1的话还做做，大于1还没想好.. 这也太复杂了.. &lt;/p&gt;
&lt;p&gt;这里的老哥敲题可真快..&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1082&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Contest" scheme="https://nicetomeetu21.github.io/categories/Programming-Contest/"/>
    
    
      <category term="Codeforces" scheme="https://nicetomeetu21.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #522 (Div. 2) (A-E)</title>
    <link href="https://nicetomeetu21.github.io/2018/11/20/Codeforces-Round-522-Div-2/"/>
    <id>https://nicetomeetu21.github.io/2018/11/20/Codeforces-Round-522-Div-2/</id>
    <published>2018-11-20T06:49:14.000Z</published>
    <updated>2018-12-06T14:35:18.960Z</updated>
    
    <content type="html"><![CDATA[<p>分类讨论场么..</p><p><a href="https://codeforces.com/contest/1079" target="_blank" rel="noopener">地址</a></p><a id="more"></a><h2 id="A-Kitchen-Utensils"><a href="#A-Kitchen-Utensils" class="headerlink" title="A. Kitchen Utensils"></a>A. Kitchen Utensils</h2><p>水签到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) num = max(num, ((a[i]<span class="number">-1</span>)/k+<span class="number">1</span>)*k);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]) ans += num-a[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Personalized-Cup"><a href="#B-Personalized-Cup" class="headerlink" title="B. Personalized Cup"></a>B. Personalized Cup</h2><p>先算出行数列数，再竖着填’*&#39;，横着填字符呗。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">char</span> s[N], ans[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> r = (n<span class="number">-1</span>)/<span class="number">20</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c = (n<span class="number">-1</span>)/r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = r*c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m == n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i &lt; r; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m == n) <span class="keyword">break</span>;</span><br><span class="line">            ans[j][i] = <span class="string">'*'</span>;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[i][j] == <span class="string">'*'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ans[i][j] = s[x++];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) ans[i][c] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, r, c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Playing-Piano"><a href="#C-Playing-Piano" class="headerlink" title="C. Playing Piano"></a>C. Playing Piano</h2><p>dp[i][j] 表示 第 i 位填 j 是否可行，一遍 dp 顺便记录前驱即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        <span class="keyword">if</span> (dp[x][i]) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; a[i<span class="number">-1</span>]) dp[i][j] = cal(i<span class="number">-1</span>, j+<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; a[i<span class="number">-1</span>]) dp[i][j] = cal(i<span class="number">-1</span>, <span class="number">1</span>, j<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span> dp[i][j] = max(cal(i<span class="number">-1</span>, <span class="number">1</span>, j<span class="number">-1</span>), cal(i<span class="number">-1</span>, j+<span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (dp[n][i]) &#123;</span><br><span class="line">            b[n] = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (!b[n]) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            b[i] = dp[i+<span class="number">1</span>][b[i+<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, b[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == n) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Barcelonian-Distance"><a href="#D-Barcelonian-Distance" class="headerlink" title="D. Barcelonian Distance"></a>D. Barcelonian Distance</h2><p>借用直线和不借用直线都算一遍，借用直线就是延 x 轴或者 y 轴先走到直线。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> a, b, c, x1, y1, x2, y2;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> x3, <span class="keyword">double</span> y3, <span class="keyword">double</span> x4, <span class="keyword">double</span> y4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(x3-x1)+<span class="built_in">fabs</span>(y3-y1)+hypot(<span class="built_in">fabs</span>(x3-x4), <span class="built_in">fabs</span>(y3-y4))+<span class="built_in">fabs</span>(x4-x2)+<span class="built_in">fabs</span>(y4-y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf%lf%lf%lf"</span>, &amp;a, &amp;b, &amp;c, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">    ans = <span class="built_in">fabs</span>(x1-x2)+<span class="built_in">fabs</span>(y1-y2);</span><br><span class="line">    <span class="keyword">if</span> (b) ans = min(ans, solve(x1, -(a*x1+c)/b, x2, -(a*x2+c)/b));</span><br><span class="line">    <span class="keyword">if</span> (a) ans = min(ans, solve(-(b*y1+c)/a, y1, -(b*y2+c)/a, y2));</span><br><span class="line">    <span class="keyword">if</span> (a&amp;&amp;b) &#123;</span><br><span class="line">        ans = min(ans, solve(x1, -(a*x1+c)/b, -(b*y2+c)/a, y2));</span><br><span class="line">        ans = min(ans, solve(-(b*y1+c)/a, y1, x2, -(a*x2+c)/b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-The-Unbearable-Lightness-of-Weights"><a href="#E-The-Unbearable-Lightness-of-Weights" class="headerlink" title="E. The Unbearable Lightness of Weights"></a>E. The Unbearable Lightness of Weights</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你 n 个物体的重量和 n 个物体，你只能问你朋友一次 (a,b)，朋友会选 b 个物体总重为 a。</p><p>问你最多能确定几个物体的重量。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>如果只有两个重量，就都可以确定。</p><p>有三个以上的重量，只能确定一种重量，即全部选同一种重量的物体且其总重的组成方案唯一。</p><p>dp[i][j] 表示总重为 i 的 j 个物体的方案数，多重背包即可。</p><p>复杂度 1e8</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]) cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">10001</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check()) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) ans += a[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(dp[<span class="number">1</span>], dp[<span class="number">0</span>], <span class="keyword">sizeof</span>(dp[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= a[i]; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i*j; k &lt;= <span class="number">10000</span>; k++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = j; l &lt;= <span class="number">100</span>; l++)</span><br><span class="line">                    dp[<span class="number">1</span>][k][l] = min(<span class="number">2</span>, dp[<span class="number">1</span>][k][l]+dp[<span class="number">0</span>][k-i*j][l-j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(dp[<span class="number">0</span>], dp[<span class="number">1</span>], <span class="keyword">sizeof</span>(dp[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= a[i]; j++)</span><br><span class="line">            <span class="keyword">if</span> (dp[<span class="number">0</span>][i*j][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                ans = max(ans, j);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分类讨论场么..&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1079&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Contest" scheme="https://nicetomeetu21.github.io/categories/Programming-Contest/"/>
    
    
      <category term="Codeforces" scheme="https://nicetomeetu21.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #520 (Div. 2)（A-E）</title>
    <link href="https://nicetomeetu21.github.io/2018/11/18/Codeforces-Round-520-Div-2/"/>
    <id>https://nicetomeetu21.github.io/2018/11/18/Codeforces-Round-520-Div-2/</id>
    <published>2018-11-18T04:46:50.000Z</published>
    <updated>2018-12-06T14:35:27.606Z</updated>
    
    <content type="html"><![CDATA[<p>感觉数学题略多.</p><p><em>F</em> 题解太长了..告辞..</p><p><a href="http://codeforces.com/contest/1062" target="_blank" rel="noopener">地址</a></p><a id="more"></a><h2 id="A-Minimizing-the-String"><a href="#A-Minimizing-the-String" class="headerlink" title="A. Minimizing the String"></a>A. Minimizing the String</h2><p>水签到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>, a[n+<span class="number">1</span>] = <span class="number">1001</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[i<span class="number">-1</span>]+<span class="number">1</span>) cnt++;</span><br><span class="line">        <span class="keyword">else</span> ans = max(ans, cnt<span class="number">-2</span>), cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = max(ans, cnt<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Math"><a href="#B-Math" class="headerlink" title="B. Math"></a>B. Math</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个数字 n，两个操作：乘上任意一个数；开根号（要求是平方数）</p><p>问最小能得到的数字是多少，至少几次操作</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先上唯一分解定理，最小能得到的数字一定是 n 的所有质因子乘积。</p><p>最小次数可按每个质因子分开讨论，因为开根号即为质因子个数除以 2，故先把质因子个数加成二的幂再不断除。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> notp[N];</span><br><span class="line"><span class="keyword">int</span> prime[N], pnum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(notp, <span class="number">0</span>, <span class="keyword">sizeof</span>(notp));</span><br><span class="line">notp[<span class="number">0</span>] = notp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">pnum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (notp[i] == <span class="number">0</span>) prime[++pnum] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pnum &amp;&amp; prime[j] * i &lt; N; j++) &#123;</span><br><span class="line">notp[prime[j] * i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sieve();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> m = n;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans1 = <span class="number">1</span>, ans2 = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pnum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (m%prime[i] == <span class="number">0</span>) cnt++, m /= prime[i];</span><br><span class="line">            ans1 *= prime[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp &amp;&amp; cnt != tmp) f = <span class="number">1</span>;</span><br><span class="line">            tmp = max(tmp, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans1 == n) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d 0\n"</span>, ans1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; tmp) x *= <span class="number">2</span>, ans2++;</span><br><span class="line">        <span class="keyword">if</span> (f || x != tmp) ans2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans1, ans2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Banh-mi"><a href="#C-Banh-mi" class="headerlink" title="C. Banh-mi"></a>C. Banh-mi</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>先给你一个01串，有 q 个区间询问</p><p>操作是先在区间内选一个位置，然后把它吃掉，得到那个位置的得分，并且区间内剩余位置的得分全部加上那个位置的得分</p><p>每次询问问该区间所能得到的最大的分是多少</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>先吃大的再吃小的最优，由于只有 0 和 1 ，就先吃 1 再吃 0</p><p>每个位置对答案的贡献可单独计算，即 1011 可看作</p><p>1000：1+1+2+4 = 2^3</p><p>100：1+1+2 = 2^2</p><p>10：1+1 = 2^1</p><p>这是第一组样例，所以很明白了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll pw2[N];</span><br><span class="line"><span class="keyword">int</span> n, q, sum[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;q, s+<span class="number">1</span>);</span><br><span class="line">    pw2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pw2[i] = pw2[i<span class="number">-1</span>]*<span class="number">2</span>%MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pw2[i] = (pw2[i] + pw2[i<span class="number">-1</span>]) % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sum[i] = sum[i<span class="number">-1</span>] + s[i]-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">int</span> a = r-l+<span class="number">1</span>, b = sum[r]-sum[l<span class="number">-1</span>];</span><br><span class="line">        ll ans = pw2[a<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) ans = (ans + MOD - pw2[a-b<span class="number">-1</span>]) % MOD;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Fun-with-Integers"><a href="#D-Fun-with-Integers" class="headerlink" title="D. Fun with Integers"></a>D. Fun with Integers</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>绝对值小于 n 的数字（除了0，1，-1），让每个数字与其倍数（除去 -1）连边，边权是两者之商的绝对值，问每条边限走一遍能得到的最大权值和是多少</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>由于每个点度数都是偶数，故存在欧拉回路。所以每个连通分量里的每条边都能访问到。</p><p>实际上根据题解的证明（图中每条边都在同一个连通分量内）可以写出 <a href="https://codeforces.com/contest/1062/submission/45742622" target="_blank" rel="noopener">这样</a> 复杂度$O(\sqrt{n})$的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sf</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[x] ? x : f[x] = sf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) f[i] = i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+i; j &lt;= n; j += i) &#123;</span><br><span class="line">            f[sf(i)] = sf(j);</span><br><span class="line">            sum[i] += <span class="number">4</span>*(j/i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (sf(i) != i) sum[sf(i)] += sum[i];</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = max(ans, sum[sf(i)]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Company"><a href="#E-Company" class="headerlink" title="E. Company"></a>E. Company</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定一棵有根树，q 个区间询问。</p><p>对于每个询问，要求区间内删去一个点后剩余点的 <em>LCA</em> 的深度，问删哪个点，深度最大多少</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>没记错的话去年多校训练碰到过类似题目。</p><p>先对每个点求 <em>DFS</em> 序，由于所有点的 <em>LCA</em> 的 <em>DFS</em> 序的作用域一定是恰好包含所有点的 <em>DFS</em> 序，即这些点的 <em>LCA</em> 即为 <em>DFS</em> 序最小的和最大的两个点的 <em>LCA</em> 。</p><p>故删掉的一定是 <em>DFS</em> 序最小的点或者最大的点。</p><p>倍增求 <em>LCA</em> + <em>ST</em> 表，复杂度$O(nlogn)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pw(i) (1&lt;&lt;(i))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEV = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="keyword">int</span> dph[N], fa[N][LEV];</span><br><span class="line"><span class="keyword">int</span> L[N], dfs_clock, F[N]; <span class="comment">// dfs序和逆映射</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    L[rt] = ++dfs_clock;</span><br><span class="line">    F[dfs_clock] = rt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; LEV; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dph[rt]<span class="number">-1</span> &lt; pw(i)) <span class="keyword">break</span>;</span><br><span class="line">        fa[rt][i] = fa[fa[rt][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : G[rt]) &#123;</span><br><span class="line">        dph[v] = dph[rt]+<span class="number">1</span>;</span><br><span class="line">        fa[v][<span class="number">0</span>] = rt;</span><br><span class="line">        dfs(v, rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dph[a] &lt; dph[b]) swap(a, b);</span><br><span class="line">    <span class="keyword">int</span> t = dph[a]-dph[b];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LEV; i++) <span class="keyword">if</span> (pw(i)&amp;t) a = fa[a][i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = LEV<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[a][i] != fa[b][i]) a = fa[a][i], b = fa[b][i];</span><br><span class="line">    <span class="keyword">if</span> (a != b) <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) G[i].clear();</span><br><span class="line">    <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</span><br><span class="line">    dph[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs_clock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Min[N][<span class="number">20</span>], Max[N][<span class="number">20</span>], lg2[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) lg2[i] = lg2[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Min[i][<span class="number">0</span>] = Max[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lg2[n]; j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i+pw(j)<span class="number">-1</span> &lt;= n; i++) &#123;</span><br><span class="line">            Min[i][j] = min(Min[i][j<span class="number">-1</span>], Min[i+pw(j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">            Max[i][j] = max(Max[i][j<span class="number">-1</span>], Max[i+pw(j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;<span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Qmin</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) swap(l, r);</span><br><span class="line">    <span class="keyword">int</span> k = lg2[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(Min[l][k], Min[r+<span class="number">1</span>-pw(k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Qmax</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) swap(l, r);</span><br><span class="line">    <span class="keyword">int</span> k = lg2[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> max(Max[l][k], Max[r+<span class="number">1</span>-pw(k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> a, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == l) <span class="keyword">return</span> lca(F[Qmin(a+<span class="number">1</span>, r)], F[Qmax(a+<span class="number">1</span>, r)]);</span><br><span class="line">    <span class="keyword">if</span> (a == r) <span class="keyword">return</span> lca(F[Qmin(l, a<span class="number">-1</span>)], F[Qmax(l, a<span class="number">-1</span>)]);</span><br><span class="line">    <span class="keyword">int</span> f1 = lca(F[Qmin(l, a<span class="number">-1</span>)], F[Qmax(l, a<span class="number">-1</span>)]);</span><br><span class="line">    <span class="keyword">int</span> f2 = lca(F[Qmin(a+<span class="number">1</span>, r)], F[Qmax(a+<span class="number">1</span>, r)]);</span><br><span class="line">    <span class="keyword">return</span> lca(f1, f2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">    init(n);<span class="comment">//multiLCA-init</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        G[x].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    Init(L, n);<span class="comment">//ST-init</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">int</span> a = F[Qmin(l, r)], b = F[Qmax(l, r)];</span><br><span class="line">        <span class="keyword">int</span> fa = solve(l, a, r), fb = solve(l, b, r);</span><br><span class="line">        <span class="keyword">if</span> (dph[fa] &gt; dph[fb]) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, a, dph[fa]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, b, dph[fb]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉数学题略多.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;F&lt;/em&gt; 题解太长了..告辞..&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1062&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Contest" scheme="https://nicetomeetu21.github.io/categories/Programming-Contest/"/>
    
    
      <category term="Codeforces" scheme="https://nicetomeetu21.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 54 (A-F)</title>
    <link href="https://nicetomeetu21.github.io/2018/11/16/Educational-Codeforces-Round-54/"/>
    <id>https://nicetomeetu21.github.io/2018/11/16/Educational-Codeforces-Round-54/</id>
    <published>2018-11-16T07:08:50.000Z</published>
    <updated>2018-12-06T14:34:59.386Z</updated>
    
    <content type="html"><![CDATA[<p>日常掉分..</p><p><em>D</em> 被无良学弟 <em>hack</em> 了，这个故事告诉我们 <em>CF</em> 上不要写<em>spfa</em>...</p><p><em>E</em> 比赛时候觉得挺难的（然后溜了），赛后仔细分析了下觉得还是挺妙的。</p><p><em>F</em> 傻傻分析不清，然而题解分析的贼清楚..</p><p>最后一题日常不会..</p><p><a href="http://codeforces.com/contest/1076" target="_blank" rel="noopener">地址</a></p><a id="more"></a><h2 id="A-Minimizing-the-String"><a href="#A-Minimizing-the-String" class="headerlink" title="A. Minimizing the String"></a>A. Minimizing the String</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>删除一个字符使得字典序最小</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>贪心呀，从前往后删第一个 <em>s[i]&gt;s[i-1]</em>。或者最后一个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> ans = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt; s[i+<span class="number">1</span>]) &#123;</span><br><span class="line">            ans = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == ans) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Divisor-Subtraction"><a href="#B-Divisor-Subtraction" class="headerlink" title="B. Divisor Subtraction"></a>B. Divisor Subtraction</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给一个数字 <em>n</em>，每次减去其最小质因子，重复此步骤，问共几次减到 <em>0</em></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>如果 <em>n</em> 是质数，就一次。</p><p>如果 <em>n</em> 是偶数，就 <em>n/2</em>。</p><p>如果 <em>n</em> 是奇数，最小质因子 <em>d</em> 一定是奇数，故 <em>(n-d)/2+1</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i*i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (n%i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>+(n-i)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solve(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Meme-Problem"><a href="#C-Meme-Problem" class="headerlink" title="C. Meme Problem"></a>C. Meme Problem</h2><p>解一元二次方程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> t, d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d);</span><br><span class="line">        <span class="keyword">if</span> (d*d<span class="number">-4</span>*d &lt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"N"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> a = (d+<span class="built_in">sqrt</span>(d*d<span class="number">-4</span>*d))/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">double</span> b = (d-<span class="built_in">sqrt</span>(d*d<span class="number">-4</span>*d))/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Y %.9f %.9f\n"</span>, a, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Edge-Deletion"><a href="#D-Edge-Deletion" class="headerlink" title="D. Edge Deletion"></a>D. Edge Deletion</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给你一张图，有边权。问你最多留下哪 <em>k</em> 条边，使得原图和新图中由 <em>1</em> 的最短路长度不变的点留下的最多</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>先建由 <em>1</em> 出发的最短路树，把多余的边全删掉。</p><p>还不够的话，从叶子开始删边。（拓扑排序或者别的什么）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    G[u].push_back(Edge&#123;v, w, id&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pre[N], f[N];</span><br><span class="line">ll d[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">typedef</span> Edge Node;</span><br><span class="line">priority_queue&lt;Node&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) d[i] = INF, vis[i] = <span class="number">0</span>;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    Q.push(Node&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        Node tmp = Q.top(); Q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = tmp.v;</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[e.v] &amp;&amp; d[e.v] &gt; d[u] + e.w) &#123;</span><br><span class="line">                d[e.v] = d[u] + e.w;</span><br><span class="line">                pre[e.v] = e.id;</span><br><span class="line">                f[e.v] = u;</span><br><span class="line">                Q.push(Node&#123;e.v, d[e.v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="keyword">bool</span> val[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) cnt[f[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[i]) que.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = que.front(); que.pop();</span><br><span class="line">        val[pre[v]] = <span class="number">0</span>;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        cnt[f[v]]--;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[f[v]]) que.push(f[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        addedge(u, v, w, i);</span><br><span class="line">        addedge(v, u, w, i);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) val[pre[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[i]) k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>) solve();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (val[i]) ans.push_back(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">        <span class="keyword">if</span> (i == ans.size()<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Vasya-and-a-Tree"><a href="#E-Vasya-and-a-Tree" class="headerlink" title="E. Vasya and a Tree"></a>E. Vasya and a Tree</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定一棵树和若干操作。操作 <em>(v,d,x)</em> 是 <em>v</em> 的子树中与 <em>v</em> 距离小于等于 <em>d</em> 的节点权值都加上 <em>x</em></p><p>问所有操作结束后的每个点的权值。</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>操作可离线。建一棵基于深度的线段树（或者树状数组），在 <em>DFS</em> 不断修改和查询。</p><p>单次修改相当于 区间 <em>[dps(v), dps(v)+d]</em> 加上 <em>x</em> 。</p><p>区间修改单点查询。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; Q[N];</span><br><span class="line">ll c[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &lt; N) c[x] += num, x += x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) s += c[x], x -= x&amp;-x;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="keyword">int</span> dps[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">    dps[u] = dps[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : Q[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> d = p.first, x = p.second;</span><br><span class="line">        modify(dps[u], x);</span><br><span class="line">        modify(dps[u]+d+<span class="number">1</span>, -x);</span><br><span class="line">    &#125;</span><br><span class="line">    ans[u] = sum(dps[u]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pre) <span class="keyword">continue</span>;</span><br><span class="line">        DFS(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : Q[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> d = p.first, x = p.second;</span><br><span class="line">        modify(dps[u],-x);</span><br><span class="line">        modify(dps[u]+d+<span class="number">1</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        G[a].push_back(b);</span><br><span class="line">        G[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        Q[a].push_back(pii(b, c));</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans[i]);</span><br><span class="line">        <span class="keyword">if</span> (i == n) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Summer-Practice-Report"><a href="#F-Summer-Practice-Report" class="headerlink" title="F. Summer Practice Report"></a>F. Summer Practice Report</h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>魔改题意。有 <em>n</em> 个连续的区间，告诉你每个区间里需要放\(x_i\)个物体 <em>a</em>，(y_i\)个物体 <em>b</em></p><p>问你是否有一种放置方法，能不出现连续 <em>k</em> 个以上的 <em>a</em> 或 <em>b</em>（可跨区间）。</p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>设 \(dp[i][0]\) 表示第 i 个区间， 若以 a 物体结尾，末尾最少的 a 物体数量。\(dp[i][1]\)类似。</p><p>最后判断 \(dp[n][0]\) 或 \(dp[n][1]\) 是否满足要求即可。</p><p>考虑 \(dp[i-1][0]\)转移至\(dp[i][0]\)：</p><p>​    首先要满足 \(x_i \ge \lceil\frac{y_i}{k}\rceil\)，即每 k 个 b 物体后插入一个 a 。</p><p>​    然后当 \(x_i \le y_i*k+1 -  dp[i-1][0] \) 时，某尾 a 的数量始终为 1，即每个 b 前面插满 k 个 a ，包括上一段的。</p><p>​    \(x_i\)还多的话，则最少为 \(x_i-(y_i*k-dp[i-1][0])\)。</p><p>可同理考虑\(dp[i-1][1]\)转移至\(dp[i][0]\)，以及\(dp[i][1]\)的转移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> x[N], y[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve1</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pre &gt; k) <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; (y+pre<span class="number">-1</span>)/k+<span class="number">1</span>) <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1l</span>l*y*k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x<span class="number">-1l</span>l*y*k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve2</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pre &gt; k) <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; (y<span class="number">-1</span>)/k+<span class="number">1</span>) <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1l</span>l*y*k-pre) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x-(<span class="number">1l</span>l*y*k-pre);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = min(solve1(dp[i<span class="number">-1</span>][<span class="number">1</span>], x[i], y[i]), solve2(dp[i<span class="number">-1</span>][<span class="number">0</span>], x[i], y[i]));</span><br><span class="line">        dp[i][<span class="number">1</span>] = min(solve1(dp[i<span class="number">-1</span>][<span class="number">0</span>], y[i], x[i]), solve2(dp[i<span class="number">-1</span>][<span class="number">1</span>], y[i], x[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][<span class="number">0</span>] &lt;= k || dp[n][<span class="number">1</span>] &lt;= k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y[i]);</span><br><span class="line">    <span class="keyword">if</span> (solve()) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常掉分..&lt;/p&gt;
&lt;p&gt;&lt;em&gt;D&lt;/em&gt; 被无良学弟 &lt;em&gt;hack&lt;/em&gt; 了，这个故事告诉我们 &lt;em&gt;CF&lt;/em&gt; 上不要写&lt;em&gt;spfa&lt;/em&gt;...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;E&lt;/em&gt; 比赛时候觉得挺难的（然后溜了），赛后仔细分析了下觉得还是挺妙的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;F&lt;/em&gt; 傻傻分析不清，然而题解分析的贼清楚..&lt;/p&gt;
&lt;p&gt;最后一题日常不会..&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1076&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Contest" scheme="https://nicetomeetu21.github.io/categories/Programming-Contest/"/>
    
    
      <category term="Codeforces" scheme="https://nicetomeetu21.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #519 (A-F)</title>
    <link href="https://nicetomeetu21.github.io/2018/11/13/Codeforces-Round-519-A-F/"/>
    <id>https://nicetomeetu21.github.io/2018/11/13/Codeforces-Round-519-A-F/</id>
    <published>2018-11-13T08:02:01.000Z</published>
    <updated>2018-12-06T14:35:37.634Z</updated>
    
    <content type="html"><![CDATA[<p>水一把 <em>CF</em>，感觉全暴力而且代码量略少。</p><p><em>G</em> 题不会..打扰了..</p><p><a href="http://codeforces.com/contests/1043" target="_blank" rel="noopener">地址</a></p><a id="more"></a><h2 id="A-Elections"><a href="#A-Elections" class="headerlink" title="A. Elections"></a>A. Elections</h2><p>公式解即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        s += a[i];</span><br><span class="line">        k = max(k, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    k = max(k, s*<span class="number">2</span>/n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Lost-Array"><a href="#B-Lost-Array" class="headerlink" title="B. Lost Array"></a>B. Lost Array</h2><p><em>KMP</em> 的 <em>next</em> 函数求出所有循环节。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N], nxt[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNxt</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">-1</span>;</span><br><span class="line">nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n) &#123;</span><br><span class="line"><span class="keyword">if</span> (k != <span class="number">-1</span> &amp;&amp; s[j] != s[k]) k = nxt[k];</span><br><span class="line"><span class="keyword">else</span> nxt[++j] = ++k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) a[i] -= a[i<span class="number">-1</span>];</span><br><span class="line">GetNxt(a+<span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">int</span> m = n;</span><br><span class="line"><span class="keyword">while</span> (nxt[m] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ans.push_back(n-nxt[m]);</span><br><span class="line">m = nxt[m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line"><span class="keyword">if</span> (i == ans.size()<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Smallest-Word"><a href="#C-Smallest-Word" class="headerlink" title="C. Smallest Word"></a>C. Smallest Word</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个只有字符 <em>a</em>,<em>b</em> 的串，问按顺序 <em>reverse</em> 哪几个前缀可以使其字典序最小。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>转几次就会发现所有的 <em>a</em> 和所有的 <em>b</em> 是可以转到一起的，故先转到一起，最后转到 <em>a</em> 在前 <em>b</em> 在后即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">bool</span> val[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;s);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">char</span> now = s[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] != now) &#123;</span><br><span class="line">            val[i<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            now = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (now == <span class="string">'a'</span>) val[n<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, val[i]);</span><br><span class="line">        <span class="keyword">if</span> (i == n<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Mysterious-Crime"><a href="#D-Mysterious-Crime" class="headerlink" title="D. Mysterious Crime"></a>D. Mysterious Crime</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定10个排列，问它们的相同子串的个数。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>由于是排列，故每个数字唯一双射一个位置。</p><p>可直接按第一个串的子串找，相当于把第一个串分成好多段，每一段都是一个相同子串，由此计数。</p><p>具体分法，即某一段是否在某个位置结束，只用看第一段这个位置和其他串的对应位置是否映射同一个数字。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>][N], pos[<span class="number">11</span>][N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (pos[i][x]+cnt &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i][pos[i][x]+cnt] != a[i<span class="number">-1</span>][pos[i<span class="number">-1</span>][x]+cnt]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">            pos[i][a[i][j]] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">1l</span>l*n*(n+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(check(a[<span class="number">1</span>][i], cnt)) cnt++;</span><br><span class="line">        ans += <span class="number">1l</span>l*cnt*(cnt+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        i += cnt<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Crossing"><a href="#D-Crossing" class="headerlink" title="D - Crossing"></a>D - Crossing</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定 <em>n</em> 个 (x,y) ，两两匹配的贡献是\(min(a_x+b_y,a_y+b_x)\)</p><p>然后除掉给定的m对匹配后，问你剩余的两两匹配之和。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>按 \(a_x+b_y&lt;a_y+b_x\) 即 \(a_x-a_y&lt;b_x-b_y\) 排序后直接算即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x-y &lt; b.x-b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line">ll x[N], y[N];</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a[i].x, &amp;a[i].y);</span><br><span class="line">        a[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">int</span> res = min(a[u].x+a[v].y, a[u].y+a[v].x);</span><br><span class="line">        ans[u] -= res;</span><br><span class="line">        ans[v] -= res;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) x[i] = x[i<span class="number">-1</span>] + a[i].x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) y[i] = y[i+<span class="number">1</span>] + a[i].y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans[a[i].id] += <span class="number">1l</span>l*a[i].y*(i<span class="number">-1</span>)+x[i<span class="number">-1</span>];</span><br><span class="line">        ans[a[i].id] += <span class="number">1l</span>l*a[i].x*(n-i)+y[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans[i]);</span><br><span class="line">        <span class="keyword">if</span> (i == n) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Make-It-One"><a href="#F-Make-It-One" class="headerlink" title="F. Make It One"></a>F. Make It One</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>从 <em>n(3e5)</em> 个给定的数字中选一组 <em>gcd</em> 为 <em>1</em> 的数，最少选几个</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>根据唯一分解定理，每选择一个数字至少消去一种素因子，而前 7 个素因子之积已超过 <em>3e5</em>，故至多选7个。</p><p>\(dp[i][j]\) 表示 <em>i</em> 的倍数中选出 <em>j</em> 个，且 <em>gcd</em> 为 <em>i</em> 的方案数 ：</p><p>$$dp[i][j] = \binom{cnt_i}{j}-\sum_{k=2}^{\infty}dp[i*k][j]$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> F[N], Finv[N], inv[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i ++) &#123;</span><br><span class="line">inv[i] = (MOD - MOD / i) * <span class="number">1l</span>l * inv[MOD % i] % MOD;</span><br><span class="line">&#125;</span><br><span class="line">F[<span class="number">0</span>] = Finv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i ++) &#123;</span><br><span class="line">F[i] = F[i<span class="number">-1</span>] * <span class="number">1l</span>l * i % MOD;</span><br><span class="line">Finv[i] = Finv[i<span class="number">-1</span>] * <span class="number">1l</span>l * inv[i] % MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comb</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">0</span> || m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> F[n] * <span class="number">1l</span>l * Finv[n - m] % MOD * Finv[m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, cnt[N];</span><br><span class="line">ll dp[N][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">cnt[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+i; j &lt; N; j += i)</span><br><span class="line">cnt[i] += cnt[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">7</span>; j++) &#123;</span><br><span class="line">dp[i][j] = comb(cnt[i], j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i+i; k &lt; N; k += i)</span><br><span class="line">dp[i][j] = (dp[i][j] + MOD - dp[k][j]) % MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">1</span>; i--) <span class="keyword">if</span> (dp[<span class="number">1</span>][i]) ans = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;水一把 &lt;em&gt;CF&lt;/em&gt;，感觉全暴力而且代码量略少。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;G&lt;/em&gt; 题不会..打扰了..&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contests/1043&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Contest" scheme="https://nicetomeetu21.github.io/categories/Programming-Contest/"/>
    
    
      <category term="Codeforces" scheme="https://nicetomeetu21.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Tenka1 Programmer Contest (C,D,E)</title>
    <link href="https://nicetomeetu21.github.io/2018/10/28/Tenka1-Programmer-Contest/"/>
    <id>https://nicetomeetu21.github.io/2018/10/28/Tenka1-Programmer-Contest/</id>
    <published>2018-10-28T12:43:37.000Z</published>
    <updated>2018-12-06T14:34:35.234Z</updated>
    
    <content type="html"><![CDATA[<p>第一把 <em>AtCoder</em>，可以说是真的菜了，<em>E</em> 题调到死都没调出来...</p><p><a href="https://beta.atcoder.jp/contests/tenka1-2018" target="_blank" rel="noopener">地址</a></p><a id="more"></a><h2 id="C-Align"><a href="#C-Align" class="headerlink" title="C - Align"></a>C - Align</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 <em>n</em> 个数字，要求排成一排后任意两个数字之差的绝对值之和最大，求最大值</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一定是将数列排序后分成两半，前一半和后一半交替排列。绝对值符号可以去掉，然后每个数字计算次数只跟其位置有关，最后分类讨论一下就好了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">if</span> (n%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n/<span class="number">2</span>; i++) ans -= <span class="number">2</span>*a[i];</span><br><span class="line">        ans -= a[n/<span class="number">2</span>];</span><br><span class="line">        ans += a[n/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n/<span class="number">2</span>+<span class="number">2</span>; i &lt;= n; i++) ans += <span class="number">2</span>*a[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        ans -= a[n/<span class="number">2</span>];</span><br><span class="line">        ans -= a[n/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n/<span class="number">2</span>; i++) ans -= <span class="number">2</span>*a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n/<span class="number">2</span>+<span class="number">2</span>; i &lt;= n; i++) ans += <span class="number">2</span>*a[i];</span><br><span class="line">        ll ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n/<span class="number">2</span>; i++) ans2 -= <span class="number">2</span>*a[i];</span><br><span class="line">        ans2 += a[n/<span class="number">2</span>+<span class="number">2</span>];</span><br><span class="line">        ans2 += a[n/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n/<span class="number">2</span>+<span class="number">3</span>; i &lt;= n; i++) ans2 += <span class="number">2</span>*a[i];</span><br><span class="line">        ans = max(ans, ans2);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Crossing"><a href="#D-Crossing" class="headerlink" title="D - Crossing"></a>D - Crossing</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定 <em>n</em>，问是否存在这样的集合组：</p><ul><li><em>1</em>-<em>n</em> 每个数字都恰好被包含在两个集合中</li><li>任意两个集合仅有一个相同数字</li></ul><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><em>n</em> 条边的完全图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i*(i<span class="number">-1</span>)/<span class="number">2</span> &lt;= n; i++) </span><br><span class="line">        <span class="keyword">if</span> (i*(i<span class="number">-1</span>)/<span class="number">2</span> == n) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> k = check(n);</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">                mp[i][j] = mp[j][i] = n--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, k<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == i) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>, mp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Equilateral"><a href="#E-Equilateral" class="headerlink" title="E - Equilateral"></a>E - Equilateral</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给出一张仅含 &#39;#&#39; 和 &#39;*&#39; 的矩阵，问位置三元组的数目，其满足每个位置上的字符都是 &#39;#&#39; 且任意两点的麦哈顿距离相同</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>跟题解大致相同的思路。</p><img src="/2018/10/28/Tenka1-Programmer-Contest/E-Equilateral.png"><p>中心红点是三点麦哈顿距离的交点。<em>a</em> 和 <em>b</em> 长度相同，第三个点坐落在蓝线上。故先枚举中间的红点，再枚举另外俩红点的位置，统计蓝线上的点的数目即可。预处理斜线前缀和，复杂度<code>O(n^3)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">3</span>*N][<span class="number">3</span>*N];</span><br><span class="line"><span class="keyword">int</span> suml[<span class="number">3</span>*N][<span class="number">3</span>*N], sumr[<span class="number">3</span>*N][<span class="number">3</span>*N];</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (mp[x-i][y] == <span class="string">'#'</span>) num++;</span><br><span class="line">        <span class="keyword">if</span> (mp[x+i][y] == <span class="string">'#'</span>) num++;</span><br><span class="line">        <span class="keyword">if</span> (mp[x][y-i] == <span class="string">'#'</span>) num++;</span><br><span class="line">        <span class="keyword">if</span> (mp[x][y+i] == <span class="string">'#'</span>) num++;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">3</span>) ans++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">4</span>) ans += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; x-i &gt;= N+<span class="number">1</span> &amp;&amp; y-i &gt;= N+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[x-i][y] == <span class="string">'.'</span> || mp[x][y-i] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> sx = x+<span class="number">1</span>, sy = y+i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> ex = x+i<span class="number">-1</span>, ey = y+<span class="number">1</span>;</span><br><span class="line">        ans += suml[ex][ey] - suml[sx<span class="number">-1</span>][sy+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; x-i &gt;= N+<span class="number">1</span> &amp;&amp; y+i &lt;= N+m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[x-i][y] == <span class="string">'.'</span> || mp[x][y+i] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> sx = x+<span class="number">1</span>, sy = y-i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ex = x+i<span class="number">-1</span>, ey = y<span class="number">-1</span>;</span><br><span class="line">        ans += sumr[ex][ey] - sumr[sx<span class="number">-1</span>][sy<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; x+i &lt;= N+n &amp;&amp; y+i &lt;= N+m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[x+i][y] == <span class="string">'.'</span> || mp[x][y+i] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> sx = x-i+<span class="number">1</span>, sy = y<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> ex = x<span class="number">-1</span>, ey = y-i+<span class="number">1</span>;</span><br><span class="line">        ans += suml[ex][ey] - suml[sx<span class="number">-1</span>][sy+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; x+i &lt;= N+n &amp;&amp; y-i &gt;= N+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[x+i][y] == <span class="string">'.'</span> || mp[x][y-i] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> sx = x-i+<span class="number">1</span>, sy = y+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ex = x<span class="number">-1</span>, ey = y+i<span class="number">-1</span>;</span><br><span class="line">        ans += sumr[ex][ey] - sumr[sx<span class="number">-1</span>][sy<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N+<span class="number">1</span>; i &lt;= N+n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i]+<span class="number">1</span>+N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>*N+n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span>*N+m; j++)</span><br><span class="line">            suml[i][j] = sumr[i][j] = (mp[i][j] == <span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>*N+n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span>*N+m; j++) &#123;</span><br><span class="line">            sumr[i][j] += sumr[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            suml[i][j] += suml[i<span class="number">-1</span>][j+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N+<span class="number">1</span>; i &lt;= N+n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = N+<span class="number">1</span>; j &lt;= N+m; j++)</span><br><span class="line">            ans += solve(i, j);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一把 &lt;em&gt;AtCoder&lt;/em&gt;，可以说是真的菜了，&lt;em&gt;E&lt;/em&gt; 题调到死都没调出来...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://beta.atcoder.jp/contests/tenka1-2018&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Contest" scheme="https://nicetomeetu21.github.io/categories/Programming-Contest/"/>
    
    
      <category term="AtCoder" scheme="https://nicetomeetu21.github.io/tags/AtCoder/"/>
    
  </entry>
  
</feed>
